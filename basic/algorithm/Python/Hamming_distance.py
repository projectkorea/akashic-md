seq1 = [
"CTTGGTACACGGAACGTTCTGAAAAGAGCTATGAATTGCAGACACCTTTTGAAATTAAATTGGCAAAGAA",
"ATTTGACACCTTCAATGGGGAATGTCCAAATTTTGTATTTCCCTTAAATTCCATAATCAAGACTATTCAA",
"CCAAGGGTTGAAAAGAAAAAGCTTGATGGCTTTATGGGTAGAATTCGATCTGTCTATCCAGTTGCGTCAC",
"CAAATGAATGCAACCAAATGTGCCTTTCAACTCTCATGAAGTGTGATCATTGTGGTGAAACTTCATGGCA",
"GACGGGCGATTTTGTTAAAGCCACTTGCGAATTTTGTGGCACTGAGAATTTGACTAAAGAAGGTGCCACT",
"ACTTGTGGTTACTTACCCCAAAATGCTGTTGTTAAAATTTATTGTCCAGCATGTCACAATTCAGAAGTAG",
"GACCTGAGCATAGTCTTGCCGAATACCATAATGAATCTGGCTTGAAAACCATTCTTCGTAAGGGTGGTCG",
"CACTATTGCCTTTGGAGGCTGTGTGTTCTCTTATGTTGGTTGCCATAACAAGTGTGCCTATTGGGTTCCA",
"CGTGCTAGCGCTAACATAGGTTGTAACCATACAGGTGTTGTTGGAGAAGGTTCCGAAGGTCTTAATGACA",
"ACCTTCTTGAAATACTCCAAAAAGAGAAAGTCAACATCAATATTGTTGGTGACTTTAAACTTAATGAAGA",
"GATCGCCATTATTTTGGCATCTTTTTCTGCTTCCACAAGTGCTTTTGTGGAAACTGTGAAAGGTTTGGAT",
"TATAAAGCATTCAAACAAATTGTTGAATCCTGTGGTAATTTTAAAGTTACAAAAGGAAAAGCTAAAAAAG",
"GTGCCTGGAATATTGGTGAACAGAAATCAATACTGAGTCCTCTTTATGCATTTGCATCAGAGGCTGCTCG",
"TGTTGTACGATCAATTTTCTCCCGCACTCTTGAAACTGCTCAAAATTCTGTGCGTGTTTTACAGAAGGCC"
]

seq2 = "AGATGCG"

def hamming_distance(x,y):
  count = 0
  for i in range(len(y)):
    if x[i] != y[i]:
      count += 1
  return count

answers =[]
min_hamming_distance = len(seq2)

for i, seq1_part in enumerate(seq1):
  for j in range(len(seq1_part)-len(seq2)+1):
    if hamming_distance(seq1_part[j:j+7],seq2) <= min_hamming_distance:
      min_hamming_distance = hamming_distance(seq1_part[j:j+7],seq2)
      answers.append([i,j,min_hamming_distance])

answers.sort(key = lambda x :(x[2]))

for answer in answers:
  if answer[2] == min_hamming_distance:
    print(f"가장 낮은 hamming distance는 {min_hamming_distance}이며, seq1의 {answer[0]+1}행 {answer[1]+1}열에 존재합니다.")