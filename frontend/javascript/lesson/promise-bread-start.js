/*
    Promise로 빵 만들기 실습
    
    시나리오: 
    1. 반죽 만들기 (2초)
    2. 발효하기 (2초)
    3. 굽기 (2초)
    
    각 단계는 비동기로 처리되며, 이전 단계가 완료되어야 다음 단계로 진행됩니다.
*/

// 1. 반죽 만들기 함수 작성
// Promise를 반환하는 함수를 만들어주세요
const makeDough = () => {
  // Promise 생성
  // setTimeout으로 2초 후에 완료되게 해주세요
  // 성공 시 "반죽 완성" 메시지 반환
  // 실패 시 "반죽 실패" 메시지 반환
}

// 2. 발효하기 함수 작성
// 이전 단계의 결과를 받아서 처리하는 Promise를 만들어주세요
const fermentDough = (dough) => {
  // Promise 생성
  // setTimeout으로 2초 후에 완료되게 해주세요
  // 성공 시 "발효된 반죽" 메시지 반환
  // 실패 시 "발효 실패" 메시지 반환
}

// 3. 굽기 함수 작성
// 발효된 반죽을 받아서 굽는 Promise를 만들어주세요
const bakeBread = (fermentedDough) => {
  // Promise 생성
  // setTimeout으로 2초 후에 완료되게 해주세요
  // 성공 시 "맛있는 빵" 메시지 반환
  // 실패 시 "굽기 실패" 메시지 반환
}

// 4. Promise 체이닝으로 실행하기
// 위에서 만든 함수들을 연결해서 실행해주세요
// then()을 사용하여 각 단계를 연결하고
// catch()로 에러를 처리해주세요
console.log('== 빵 만들기 시작! ==')

// 여기에 Promise 체이닝 코드 작성
// makeDough()로 시작해서 각 단계를 then()으로 연결하세요

/*
    실행 결과 예시:
    == 빵 만들기 시작! ==
    1. 밀가루 반죽을 시작합니다...
    밀가루 반죽 완료!
    결과: 반죽 완성
    2. 반죽을 발효중입니다...
    발효 완료!
    결과: 발효된 반죽
    3. 빵을 굽고 있습니다...
    구워졌습니다!
    결과: 맛있는 빵
    == 빵 만들기 완료! ==
*/
