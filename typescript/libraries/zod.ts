/*
-`zod`를 사용하는 세 가지 이유
  1. **런타임 데이터 검증**: TypeScript는 컴파일 타임에만 타입을 체크할 수 있지만, Zod는 실제로 들어오는 외부 데이터를 런타임에서 검증해 예상치 못한 오류를 방지합니다.
  2. **통합된 타입 정의와 유효성 검사**: Zod는 스키마를 정의하면서 동시에 TypeScript 타입을 자동으로 추론해, 코드 중복을 줄이고 타입 안정성과 유효성 검사를 한 번에 처리할 수 있습니다.
  3. **복잡한 데이터 구조 처리**: Zod는 선택적 필드, 중첩된 객체, 유니언 타입 등의 복잡한 구조도 쉽게 검증하며, 데이터 구조가 복잡해질수록 강력한 유효성 검사 도구로 작동합니다.
  - **카테고리**
      - **데이터 검증 및 스키마 정의 라이브러리 |** **런타임 타입 검증 라이브러리**
      - 코드의 런타임 시점에서 외부로부터 들어오는 데이터를 검증하고, 그 데이터가 사전에 정의한 스키마(데이터 구조)에 맞는지 확인한다
      - 유사한 라이브러리 **Yup**: js와 ts에서 많이 쓰이는 데이터 검증 라이브러리로, 유효성 검사를 위한 선언적 API를 제공
*/

