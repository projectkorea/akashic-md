
#1. 앵커와 별칭 (재사용)

```yaml
defaults: &defaults
  timeout: 30
  retry: 3

production:
  <<: *defaults  # defaults의 모든 값을 재사용
  env: prod
```

#주의사항:

- 콜론(:) 뒤에는 반드시 공백 필요
- 대소문자 구분함
- 들여쓰기에 탭(Tab) 사용하지 말것
- 앵커(&)와 별칭(*)을 사용한 재사용

#1. 기본 문법:
    
    ```yaml
    # 앵커 정의: &앵커이름
    # 별칭 사용: *앵커이름
    
    # 예시 1: 단순 값 재사용
    default_value: &default hello
    other_value: *default  # 'hello' 값을 가짐
    ```
    
    1. 객체 재사용:
    
    ```yaml
    # 예시 2: 객체 재사용
    default_config: &default_config
      timeout: 30
      retry: 3
      enabled: true
    
    service1:
      <<: *default_config  # 모든 설정 상속
      timeout: 60  # 특정 값만 오버라이드
    
    service2:
      <<: *default_config  # 모든 설정 상속
    ```
    
    1. 리스트 재사용:
    
    ```yaml
    # 예시 3: 리스트 재사용
    common_fruits: &fruits
      - apple
      - banana
      - orange
    
    fruit_basket1:
      contents: *fruits
    
    fruit_basket2:
      contents:
        <<: *fruits
        - grape  # 추가 아이템
    ```
    
    1. 복잡한 예시:
    
    ```yaml
    # 예시 4: 실제 개발 환경 설정
    defaults: &defaults
      docker: &docker_defaults
        image: ubuntu:20.04
        volumes:
          - /data:/data
        environment: &env_defaults
          DEBUG: false
          TIMEOUT: 3000
    
    development:
      <<: *defaults
      docker:
        <<: *docker_defaults
        environment:
          <<: *env_defaults
          DEBUG: true  # 개발 환경만 디버그 모드 활성화
    
    production:
      <<: *defaults  # 기본 설정 모두 상속
    ```
    
    1. 여러 앵커 조합:
    
    ```yaml
    # 예시 5: 여러 앵커 조합하기
    database: &db_settings
      host: localhost
      port: 5432
    
    credentials: &db_credentials
      username: admin
      password: secret
    
    database_config:
      <<: *db_settings
      <<: *db_credentials
      database: myapp
    ```
    
    주요 포인트:
    
    1. `&`로 앵커 정의
    2. `*`로 앵커 참조
    3. `<<:`로 객체 속성 병합
    4. 앵커 사용 후 특정 값만 오버라이드 가능
    5. 여러 앵커를 조합해서 사용 가능
    

### YAML에서의 마침표(.) 문법

- **.으로 시작하는 경우**
    - Hidden 또는 Private 키를 의미
    - 직접 실행되지 않음
    - CI/CD 파이프라인에 표시되지 않음
    - 재사용 가능한 템플릿 역할
    - `<<: *이름` 형식으로 다른 job에서 상속 가능
- **.없이 시작하는 경우**
    - 실제 실행되는 CI/CD job
    - 파이프라인에서 볼 수 있는 일반 job
    - 직접 실행됨

```yaml
# Hidden 템플릿, Private 키 (실행X, 상속용)
.deploy_configuration:
  stage: deploy
  script:
    - echo "template"

# 실제 job (실행O)
deploy-dev:
  <<: *deploy_configuration
  script:
    - echo "real job"
```
